{"version":3,"sources":["Navbar.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","placeholder","Movie","props","searchChangeHandler","event","performSearch","target","value","state","rows","searchTerm","url","fetch","then","data","json","response","movies","results","movieRows","forEach","movie","movieRow","key","id","title","alt","src","poster_path","push","setState","catch","error","console","onChange","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAgCeA,MA7Bf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,cAAcC,KAAK,KAAhC,QAGA,uBAAGD,UAAU,OAAOC,KAAK,KAAzB,kBAGA,uBAAGD,UAAU,OAAOC,KAAK,KAAzB,mBAGA,yBAAKD,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACb,2BAAOE,KAAK,OAAOC,YAAY,cAC/B,uBAAGH,UAAU,uBAGjB,uBAAGA,UAAU,UAAUC,KAAK,KAA5B,c,mCCiCGG,E,YArDX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAOVC,oBAAsB,SAACC,GACnB,EAAKC,cAAcD,EAAME,OAAOC,QAPhC,EAAKC,MAAQ,CACTC,KAAM,IAHI,E,2EAaJC,GAAa,IAAD,OAChBC,EAAG,mGAA+FD,GACxGE,MAAMD,GACLE,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAAG,GACF,IAAIC,EAASD,EAASE,QAElBC,EAAY,GAChBF,EAAOG,SAAQ,SAACC,GAChB,IAAMC,EAAW,yBAAKC,IAAKF,EAAMG,IACZH,EAAMI,MACP,6BACA,yBAAKC,IAAI,SAASC,IAAK,kCAAoCN,EAAMO,eAErFT,EAAUU,KAAKP,MAEnB,EAAKQ,SAAU,CAAErB,KAAMU,OAEtBY,OAAM,SAAAC,GACHC,QAAQD,MAAM,4BAA6BA,Q,+BAM/C,OACG,6BACI,4CACA,2BAAOR,GAAG,aACNU,SAAUC,KAAKhC,oBACfH,YAAY,qBAGfmC,KAAK3B,MAAMC,U,GA/CP2B,aCWLC,MATf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.fba9b3e8.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      <div className=\"ui secondary  menu\">\n          <a className=\"item active\" href=\"/\">\n            Home\n          </a>\n          <a className=\"item\" href=\"/\">\n            Get Free Stuff\n          </a>\n          <a className=\"item\" href=\"/\">\n            Post Free Stuff\n          </a>\n          <div className=\"right menu\">\n            <div className=\"item\">\n              <div className=\"ui icon input\">\n                <input type=\"text\" placeholder=\"Search...\" />\n                <i className=\"search link icon\"></i>\n              </div>\n            </div>\n            <a className=\"ui item\" href=\"/\">\n              Logout\n            </a>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React, {Component} from 'react'\n\nclass Movie extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            rows: []\n          }\n       \n    }\n\n    searchChangeHandler = (event) => {\n        this.performSearch(event.target.value);\n      }\n   \n\n    performSearch(searchTerm) {\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=4de3f13a4cdd05831b95a97d3b3e2da6&query=${searchTerm}`\n        fetch(url)\n        .then((data) => data.json())\n        .then(response => {\n            let movies = response.results;\n\n            var movieRows = [];\n            movies.forEach((movie) => {\n            const movieRow = <div key={movie.id}>\n                                {movie.title}\n                                <br></br>\n                                <img alt=\"poster\" src={\"http://image.tmdb.org/t/p/w185/\" + movie.poster_path}></img>\n                            </div>\n            movieRows.push(movieRow)    \n        })\n        this.setState ({ rows: movieRows})\n        })\n        .catch(error => {\n            console.error('Error coming from API:   ', error)\n        })\n      }\n   \n\n    render() {\n        return (\n           <div>\n               <h1>Movie Search</h1>\n               <input id=\"inputField\"\n                   onChange={this.searchChangeHandler} \n                   placeholder=\"Enter your movie\">\n                </input>\n\n               {this.state.rows}\n           </div>\n        );\n     }\n     \n}\n\nexport default Movie;","import React from 'react';\nimport Navbar from './Navbar'\nimport Movie from './Movie'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Movie />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}